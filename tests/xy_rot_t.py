from generative_model import generate_video
from viz import viz_phis

import numpy as np

# phis: [[N_y, N_x], [CH], n_philters, t, n_y, n_x, ch]
# a: [batch, T, N_y, N_x, [CH], n_philters]
import torch
PHIS_0 = torch.tensor([
    [0.3, 0., 0.1],
    [0., 0.5, 0.],
    [0.9, 0., 0.7]], dtype=torch.float32).reshape(
    1, 1, 1, 1, 3, 3, 1)
viz_phis(PHIS_0, "xy_rot_t/phis0")

# PHIS_1 = torch.tensor([
#     [
#         [
#             [
#                 [[[0.3, 0], [0, 0.1], [0.1, 0]], [[0, 0.7], [0.5, 0.5], [0, 0.3]], [[0.9, 0], [0, 0.9], [0.7, 0]]],
#                 [],
#             ]
#         [[[0.7, 0], [0, 0.9], [0.9, 0]], [[0, 0.3], [0.5, 0.5], [0, 0.7]], [[0.1, 0], [0, 0.1], [0.3, 0]]],
#         [[[0, 0.5], [0.5, 0], [0, 0.5]], [[0.5, 0], [0.5, 0.5], [0.5, 0]], [[0, 0.5], [0.5, 0], [0, 0.5]]]]
#     ],
#     [
#         [[[[0, 0.1], [0.1, 0], [0, 0.3]], [[0.3, 0], [0.5, 0.5], [0.7, 0]], [[0, 0.7], [0.9, 0], [0, 0.9]]],
#         [[[0, 0.9], [0.9, 0], [0, 0.7]], [[0.7, 0], [0.5, 0.5], [0.3, 0]], [[0, 0.3], [0.1, 0], [0, 0.1]]],
#         [[[0.5, 0], [0, 0.5], [0.5, 0]], [[0, 0.5], [0.5, 0.5], [0, 0.5]], [[0.5, 0], [0, 0.5], [0.5, 0]]]]
#     ]], dtype=torch.float32).reshape(
#     [2, 4, 3, 3, 2])

def phis0_base_video():
    phis = PHIS_0

    alpha_X = alpha_Y = 8
    stride_X = stride_Y = 1

    a = torch.tensor([
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]]], dtype=torch.float32)
    a = a.reshape(1, 9, 3, 3, 1, 1)

    mu_X = torch.tensor([
        [[0, 0, 0], [0, -0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_X = mu_X.reshape(1, 9, 3, 3, 1, 1)
    mu_Y = torch.tensor([
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_Y = mu_Y.reshape(1, 9, 3, 3, 1, 1)

    sigma_X = torch.tensor([
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_X = sigma_X.reshape(1, 9, 3, 3, 1, 1)
    sigma_Y = torch.tensor([
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_Y = sigma_Y.reshape(1, 9, 3, 3, 1, 1)

    rot = torch.tensor([
        [[0, 0, 0], [0, np.pi/4, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/4, 0], [0, 0, 0]]], dtype=torch.float32)
    rot = rot.reshape(1, 9, 3, 3, 1, 1)

    alpha_T = 1
    stride_T = 1
    mu_T = torch.zeros_like(mu_X)
    sigma_T = torch.ones_like(sigma_X)

    plot_save_dir = "xy_rot_t/phis0_base_video"
    RGB = False

    generate_video(
    phis,
    alpha_T, alpha_Y, alpha_X,
    stride_T, stride_Y, stride_X,
    a,
    mu_T, mu_Y, mu_X,
    sigma_T, sigma_Y, sigma_X,
    rot,
    plot_save_dir, RGB,
)

def phis0_base_video_alphat3():
    phis = PHIS_0

    alpha_X = alpha_Y = 8
    stride_X = stride_Y = 1

    a = torch.tensor([
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]]], dtype=torch.float32)
    a = a.reshape(1, 9, 3, 3, 1, 1)

    mu_X = torch.tensor([
        [[0, 0, 0], [0, -0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_X = mu_X.reshape(1, 9, 3, 3, 1, 1)
    mu_Y = torch.tensor([
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_Y = mu_Y.reshape(1, 9, 3, 3, 1, 1)

    sigma_X = torch.tensor([
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_X = sigma_X.reshape(1, 9, 3, 3, 1, 1)
    sigma_Y = torch.tensor([
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_Y = sigma_Y.reshape(1, 9, 3, 3, 1, 1)

    rot = torch.tensor([
        [[0, 0, 0], [0, np.pi/4, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/4, 0], [0, 0, 0]]], dtype=torch.float32)
    rot = rot.reshape(1, 9, 3, 3, 1, 1)

    alpha_T = 3
    stride_T = 1
    mu_T = torch.zeros_like(mu_X)
    sigma_T = torch.ones_like(sigma_X)

    plot_save_dir = "xy_rot_t/phis0_base_video_alphat3"
    RGB = False

    generate_video(
    phis,
    alpha_T, alpha_Y, alpha_X,
    stride_T, stride_Y, stride_X,
    a,
    mu_T, mu_Y, mu_X,
    sigma_T, sigma_Y, sigma_X,
    rot,
    plot_save_dir, RGB,
)

def phis0_base_video_alphat3_stridet033():
    phis = PHIS_0

    alpha_X = alpha_Y = 8
    stride_X = stride_Y = 1

    a = torch.tensor([
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]]], dtype=torch.float32)
    a = a.reshape(1, 9, 3, 3, 1, 1)

    mu_X = torch.tensor([
        [[0, 0, 0], [0, -0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_X = mu_X.reshape(1, 9, 3, 3, 1, 1)
    mu_Y = torch.tensor([
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_Y = mu_Y.reshape(1, 9, 3, 3, 1, 1)

    sigma_X = torch.tensor([
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_X = sigma_X.reshape(1, 9, 3, 3, 1, 1)
    sigma_Y = torch.tensor([
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_Y = sigma_Y.reshape(1, 9, 3, 3, 1, 1)

    rot = torch.tensor([
        [[0, 0, 0], [0, np.pi/4, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/4, 0], [0, 0, 0]]], dtype=torch.float32)
    rot = rot.reshape(1, 9, 3, 3, 1, 1)

    alpha_T = 3
    stride_T = 0.33
    mu_T = torch.zeros_like(mu_X)
    sigma_T = torch.ones_like(sigma_X)

    plot_save_dir = "xy_rot_t/phis0_base_video_alphat3_stridet033"
    RGB = False

    generate_video(
    phis,
    alpha_T, alpha_Y, alpha_X,
    stride_T, stride_Y, stride_X,
    a,
    mu_T, mu_Y, mu_X,
    sigma_T, sigma_Y, sigma_X,
    rot,
    plot_save_dir, RGB,
)

def phis0_base_video_a2_sigmat2():
    phis = PHIS_0

    alpha_X = alpha_Y = 8
    stride_X = stride_Y = 1

    a = torch.tensor([
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]]], dtype=torch.float32)
    a = a.reshape(1, 9, 3, 3, 1, 1)

    mu_X = torch.tensor([
        [[0, 0, 0], [0, -0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.375, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_X = mu_X.reshape(1, 9, 3, 3, 1, 1)
    mu_Y = torch.tensor([
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.25, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0., 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.125, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -0.25, 0], [0, 0, 0]]], dtype=torch.float32)
    mu_Y = mu_Y.reshape(1, 9, 3, 3, 1, 1)

    sigma_X = torch.tensor([
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_X = sigma_X.reshape(1, 9, 3, 3, 1, 1)
    sigma_Y = torch.tensor([
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 2, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1.5, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 1, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.75, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0.5, 0], [0, 0, 0]]], dtype=torch.float32)
    sigma_Y = sigma_Y.reshape(1, 9, 3, 3, 1, 1)

    rot = torch.tensor([
        [[0, 0, 0], [0, np.pi/4, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, 0, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/8, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -3*np.pi/16, 0], [0, 0, 0]],
        [[0, 0, 0], [0, -np.pi/4, 0], [0, 0, 0]]], dtype=torch.float32)
    rot = rot.reshape(1, 9, 3, 3, 1, 1)

    alpha_T = 1
    stride_T = 1
    mu_T = torch.zeros_like(mu_X)
    sigma_T = 2*torch.ones_like(sigma_X)

    plot_save_dir = "xy_rot_t/phis0_base_video_sigmat2"
    RGB = False

    generate_video(
    phis,
    alpha_T, alpha_Y, alpha_X,
    stride_T, stride_Y, stride_X,
    a,
    mu_T, mu_Y, mu_X,
    sigma_T, sigma_Y, sigma_X,
    rot,
    plot_save_dir, RGB,
)

# phis: [[N_y, N_x], [CH], n_philters, t, n_y, n_x, ch]
# a: [batch, T, N_y, N_x, [CH], n_philters]
def phis1_batch_CH_Ny_Nx_nphilters():
    phis = PHIS_1

    alpha_X = alpha_Y = 8
    stride_X = stride_Y = 2

    a = torch.tensor([
        [
            [[[[1, 0, 0], [1, 0, 0]]], [[[0, 1, 0], [0, 1, 0]]], [[[0, 0, 1], [0, 0, 1]]]],
            [[[[1, 1, 0], [1, 1, 0]]], [[[0, 1, 1], [0, 1, 1]]], [[[1, 0, 1], [1, 0, 1]]]],
            [[[[1, 1, 2], [1, 1, 2]]], [[[1, 0, 0], [0, 1, 0]]], [[[0, 1, 0], [1, 0, 0]]]],
        ],
        [
            [[[[1, 1, 2], [1, 1, 2]]], [[[1, 0, 0], [0, 1, 0]]], [[[0, 1, 0], [1, 0, 0]]]],
            [[[[1, 0, 0], [1, 0, 0]]], [[[0, 1, 0], [0, 1, 0]]], [[[0, 0, 1], [0, 0, 1]]]],
            [[[[1, 1, 0], [1, 1, 0]]], [[[0, 1, 1], [0, 1, 1]]], [[[1, 0, 1], [1, 0, 1]]]],
        ],
    ], dtype=torch.float32)
    a = a.reshape(2, 1, 3, 3, 2, 3)

    mu_X = torch.tensor([
        [
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0.25, -0.25], [0, -0.25, 0.25]]], [[[-0.25, 0, 0.25], [0.25, 0, -0.25]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[0.25, 0, 0], [0, -0.25, 0]]], [[[0, -0.25, 0], [0.25, 0, 0]]]],
        ],
        [
            [[[[0, 0, 0], [0, 0, 0]]], [[[0.25, 0, 0], [0, -0.25, 0]]], [[[0, -0.25, 0], [0.25, 0, 0]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0.25, -0.25], [0, -0.25, 0.25]]], [[[-0.25, 0, 0.25], [0.25, 0, -0.25]]]],
        ],
    ], dtype=torch.float32)
    mu_X = mu_X.reshape(2, 1, 3, 3, 2, 3)
    mu_Y = -mu_X.clone()

    sigma_X = torch.tensor([
        [
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[0.5, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
        ],
        [
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [0.5, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
        ],
    ], dtype=torch.float32)
    sigma_X = sigma_X.reshape(2, 1, 3, 3, 2, 3)
    sigma_Y = torch.tensor([
        [
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 0.5, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
        ],
        [
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 0.5, 1], [1, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
            [[[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]], [[[1, 1, 1], [1, 1, 1]]]],
        ],
    ], dtype=torch.float32)
    sigma_Y = sigma_Y.reshape(2, 1, 3, 3, 2, 3)

    rot = torch.tensor([
        [
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[np.pi/6, 0, 0], [0, -np.pi/6, 0]]], [[[0, -np.pi/4, 0], [np.pi/4, 0, 0]]]],
        ],
        [
            [[[[0, 0, 0], [0, 0, 0]]], [[[-np.pi/4, 0, 0], [0, np.pi/4, 0]]], [[[0, np.pi/6, 0], [-np.pi/6, 0, 0]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]]],
            [[[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]], [[[0, 0, 0], [0, 0, 0]]]],
        ],
    ], dtype=torch.float32)
    rot = rot.reshape(2, 1, 3, 3, 2, 3)

    alpha_T = 1
    stride_T = 1
    mu_T = torch.zeros_like(mu_X)
    sigma_T = torch.ones_like(sigma_X)

    plot_save_dir = "xy_rot/phis1_batch_CH_Ny_Nx_nphilters"
    RGB = False

    generate_video(
    phis,
    alpha_T, alpha_Y, alpha_X,
    stride_T, stride_Y, stride_X,
    a,
    mu_T, mu_Y, mu_X,
    sigma_T, sigma_Y, sigma_X,
    rot,
    plot_save_dir, RGB,
)

if __name__ == "__main__":
    # phis0_base_video()
    # phis0_base_video_alphat3()
    # phis0_base_video_alphat3_stridet033()
    # phis0_base_video_a2_sigmat2()

    # phis1_batch_CH_Ny_Nx_nphilters()
